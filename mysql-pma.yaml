# Save the output of this file and use kubectl create -f to import
# it into Kubernetes.
#
# Created with podman-4.1.1
apiVersion: v1
kind: Pod
metadata:
  annotations:
    io.kubernetes.cri-o.ContainerType/db: container
    io.kubernetes.cri-o.ContainerType/pma: container
    io.kubernetes.cri-o.SandboxID/db: mysql-pma
    io.kubernetes.cri-o.SandboxID/pma: mysql-pma
    io.kubernetes.cri-o.TTY/db: "true"
    io.kubernetes.cri-o.TTY/pma: "false"
    io.podman.annotations.autoremove/db: "FALSE"
    io.podman.annotations.autoremove/pma: "FALSE"
    io.podman.annotations.init/db: "FALSE"
    io.podman.annotations.init/pma: "FALSE"
    io.podman.annotations.privileged/db: "FALSE"
    io.podman.annotations.privileged/pma: "FALSE"
    io.podman.annotations.publish-all/db: "FALSE"
    io.podman.annotations.publish-all/pma: "FALSE"
  creationTimestamp: "2022-10-19T07:17:38Z"
  labels:
    app: mysql-pma
  name: mysql-pma
spec:
  containers:
  - args:
    - apache2-foreground
    env:
    - name: PMA_PORT
      value: "3306"
    - name: PMA_HOST
      value: mysql-pma-db
    image: docker.io/phpmyadmin/phpmyadmin:latest
    name: pma
    ports:
    - containerPort: 80
      hostPort: 8787
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
  - args:
    - mysqld
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: cyu
    - name: MYSQL_DATABASE
      value: db
    - name: MYSQL_ROOT_HOST
      value: 127.0.0.1
    image: docker.io/mysql/mysql-server:latest
    name: db
    resources: {}
    securityContext:
      capabilities:
        drop:
        - CAP_MKNOD
        - CAP_AUDIT_WRITE
    stdin: true
    tty: true
    volumeMounts:
    - mountPath: /var/lib/mysql
      name: db_data-pvc
  restartPolicy: Never
  volumes:
  - name: db_data-pvc
    persistentVolumeClaim:
      claimName: db_data
status: {}
